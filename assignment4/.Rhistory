baoan <- read.csv('2281305.csv')
library(tidyr)
library(dplyr)
library(ggplot2)
library(forecast)
baoan_tbl <- as_tibble(baoan)
tem_time <- baoan_tbl %>%
mutate(month = substr(DATE,6,7),year_month=substr(DATE,1,7),
temp_new = ifelse(substr(TMP,7,7)==1,substr(TMP,2,5), NA)) %>%
group_by(year_month) %>%
summarize(temp_mean=mean(as.numeric(temp_new), na.rm = TRUE))
temp_year <- ts(tem_time$temp_mean, start=c(2010,1), frequency=12)
plot(temp_year, type="l", col='red')
#2.2
temp_components <- decompose(temp_year)
plot(temp_components,col='blue')
hist(temp_components$random, prob=TRUE,col = "blue",border = "yellow"),
# Add pdf
curve(dnorm(x, mean=mean(temp_components$random,na.rm=T),
sd=sd(temp_components$random,na.rm=T)),
add=TRUE, col="red")
hist(temp_components$random, prob=TRUE,col = "blue",border = "yellow")
# Add pdf
curve(dnorm(x, mean=mean(temp_components$random,na.rm=T),
sd=sd(temp_components$random,na.rm=T)),
add=TRUE, col="red")
library(lubridate)
View(baoan)
#--------------------------------------------
# 1.2
# Read in the COVID-19 data
COVID_data <- read.csv(file = "20201108.csv", header = T)
#--------------------------------------------
# 1.2
# Read in the COVID-19 data
COVID_data <- read.csv(file = "data_20201108.csv", header = T)
View(COVID_data)
# Check the variable names
head(COVID_data)
View(baoan)
temp_year_log = log(temp_year)
plot(temp_year_log)
# Check acf and pacf
acf(temp_year_log)
pacf(temp_year_log)
plot(temp_year_log)
plot(temp_year_log,col='blue')
temp_year_log = log(temp_year)
plot(temp_year_log,col='blue')
# Check acf and pacf
acf(temp_year_log)
pacf(temp_year_log)
# Take the diff, d=1
temp_year_log_d1 <- diff(temp_year_log)
# Plot time series
plot(temp_year_log_d1)
# Plot time series
plot(temp_year_log_d1,col='blue')
# Check acf and pacf
acf(temp_year_log_d1)
pacf(temp_year_log_d1)
# Check acf and pacf
acf(temp_year_log_d1,col='blue')
pacf(temp_year_log_d1,col='blue')
# Automated forecasting using an ARIMA model
model <- auto.arima(global_cases_ts_log)
# Automated forecasting using an ARIMA model
model <- auto.arima(temp_year_log_d1)
summarise(model)
summary(model)
#2.4 predict
# Make predictions
forecast_2months <- forecast(model, 2)
plot(forecast_2months)
forecast_2months
#2.4 predict
# Make predictions
forecast_2months <- forecast(model, 1)
plot(forecast_2months)
forecast_2months
# Plot predictions along with real values
plot(forecast(model, 1), include = 10, xlab="Time",
ylab="log(temp_year_log_d1)",type="o",lwd=2)
#2.4 predict
# Make predictions
forecast_2months <- forecast(model, 3)
plot(forecast_2months)
#2.4 predict
# Make predictions
forecast_2months <- forecast(model, 10)
plot(forecast_2months)
#2.4 predict
# Make predictions
forecast_2months <- forecast(model, 20)
plot(forecast_2months)
#2.4 predict
# Make predictions
forecast_2months <- forecast(model, 2)
plot(forecast_2months)
forecast_2months
# Plot predictions along with real values
plot(forecast(model, 1), include = 10, xlab="Time",
ylab="log(temp_year_log_d1)",type="o",lwd=2)
forecast(model, 1)
View(COVID_data)
# Automated forecasting using an ARIMA model
model <- auto.arima(temp_year_log)
summary(model)
#2.4 predict
# Make predictions
forecast_2months <- forecast(model, 2)
plot(forecast_2months)
forecast_2months
# Check the variable names
head(COVID_data)
# Convert the data.frame to a tibble
COVID_tbl <- as_tibble(COVID_data)
#--------------------------------------------
# 1.3
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
#--------------------------------------------
# 1.4
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases,
type="l",xlab="Date",ylab="Global cases")
#--------------------------------------------
# 1.5
# Filter the data
# Only use data from April 01
COVID_tbl <- COVID_tbl %>%
filter(dateRep >= as.Date("2020-04-01"))
#--------------------------------------------
# 1.6
# Convert to ts
# Start date of the time series, read from the .csv file
Date_start <- as.Date("2020-04-01")
# End date of the time series, read from the .csv file
Date_end   <- as.Date("2020-11-08")
# Get the Julian Day of the end date
JD_start   <- yday(Date_start)
# Convert the vector data to a time series
global_cases_ts <- ts(COVID_tbl$global_cases[1:222], start=c(2020,JD_start),frequency=365)
# The indicator of the time series
inds            <- seq(Date_start, Date_end, by = "day")
# Check structure
str(global_cases_ts)
# Plot time series
plot(inds,global_cases_ts)
#--------------------------------------------
# 1.7
# Data transform with log
global_cases_ts_log <- log(global_cases_ts)
# Plot time series
plot(inds,global_cases_ts_log)
# Check acf and pacf
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
#--------------------------------------------
# 1.8
# Take the diff, d=1
global_cases_ts_log_d1 <- diff(global_cases_ts_log)
# Plot time series
plot(global_cases_ts_log_d1)
# Check acf and pacf
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
#--------------------------------------------
# 1.9
# Automated forecasting using an ARIMA model
model <- auto.arima(global_cases_ts_log)
#--------------------------------------------
# 1.10
# Make predictions
days_forecast  <- 30
days_in_plot   <- 30
forecast_15days <- forecast(model, days_forecast)
# Plot predictions along with real values
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time",
ylab="log(global cases)",type="o",lwd=2)
# Nov 09
day_forward <- yday(as.Date("2020-11-09")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Nov 30
day_forward <- yday(as.Date("2020-11-30")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Read data
COVID_data2 <- read.csv(file = "data.csv", header = T)
COVID_tbl2 <- as_tibble(COVID_data2)
View(COVID_tbl2)
# Get global daily new cases
COVID_tbl2 <- COVID_tbl2 %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
# Real values at Nov 09
tail(COVID_tbl2)
global_cases_ts_log_d1
# Plot time series
plot(global_cases_ts_log_d1)
# Check acf and pacf
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
tem_time
temp_year
temp_year
View(tem_time)
temp_year
#因为没有2020年10月份的真是数据，所以取2010年1月份-2019年5月份的数据进行拟合，
#来预测2020年6月至9月的数据并进行评估
temp_for_fit <- temp_year[1:123]
temp_for_fit
plot(temp_for_fit)
tem_time$temp_mean
#因为没有2020年10月份的真是数据，所以取2010年1月份-2019年5月份的数据进行拟合，
#来预测2020年6月至9月的数据并进行评估
temp_for_fit <- ts(tem_time$temp_mean[1:123], start=c(2010,1), frequency=12)
plot(temp_for_fit)
temp_for_fit
#因为没有2020年10月份的真是数据，所以取2010年1月份-2019年5月份的数据进行拟合，
#来预测2020年6月至9月的数据并进行评估
temp_for_fit <- ts(tem_time$temp_mean[1:125], start=c(2010,1), frequency=12)
plot(temp_for_fit)
temp_for_fit
temp_year_log = log(temp_for_fit)
plot(temp_year_log,col='blue')
# Check acf and pacf
acf(temp_year_log)
pacf(temp_year_log)
# Automated forecasting using an ARIMA model
model <- auto.arima(temp_year_log)
summary(model)
#2.4 predict
# Make predictions
forecast_2months <- forecast(model, 4)
plot(forecast_2months)
#2.4 predict
# Make predictions
forecast_2months <- forecast(model, 5)
plot(forecast_2months)
forecast_2months
#因为没有2020年10月份的真实数据，所以取2010年1月份-2019年4月份的数据进行拟合，
#来预测2020年5月至9月的数据并使用真实值进行评估
temp_for_fit <- ts(tem_time$temp_mean[1:124], start=c(2010,1), frequency=12)
plot(temp_for_fit)
temp_year_log = log(temp_for_fit)
plot(temp_year_log,col='blue')
# Check acf and pacf
acf(temp_year_log)
pacf(temp_year_log)
# Take the diff, d=1
temp_year_log_d1 <- diff(temp_year_log)
# Plot time series
plot(temp_year_log_d1,col='blue')
# Check acf and pacf
acf(temp_year_log)
plot(temp_year_log,col='blue')
# Check acf and pacf
acf(temp_year_log)
pacf(temp_year_log)
# Take the diff, d=1
temp_year_log_d1 <- diff(temp_year_log)
# Plot time series
plot(temp_year_log_d1,col='blue')
# Automated forecasting using an ARIMA model
model <- auto.arima(temp_year_log)
# Check acf and pacf
acf(temp_year_log_d1,col='blue')
pacf(temp_year_log_d1,col='blue')
# Automated forecasting using an ARIMA model
model <- auto.arima(temp_year_log)
summary(model)
#2.4 predict
# Make predictions
forecast_2months <- forecast(model, 5)
plot(forecast_2months)
# Plot predictions along with real values
plot(forecast(model, 1), include = 10, xlab="Time",
ylab="log(temp_year_log_d1)",type="o",lwd=2)
# Plot predictions along with real values
plot(forecast(model, 5), include = 10, xlab="Time",
ylab="log(temp_year_log_d1)",type="o",lwd=2)
# Plot predictions along with real values
plot(forecast(model, 5), include = 20, xlab="Time",
ylab="log(temp_year_log_d1)",type="o",lwd=2)
# Plot predictions along with real values
plot(forecast(model, 5), include = 30, xlab="Time",
ylab="log(temp_year_log_d1)",type="o",lwd=2)
day_forward
forecast_15days
#2.4 predict
# Make predictions
forecast_5months <- forecast(model, 5)
plot(forecast_5months)
exp(forecast_5months$mean[day_forward])
exp(forecast_5months$lower[day_forward,1])
# Nov 09
day_forward <- 5
exp(forecast_5months$mean[day_forward])
exp(forecast_5months$lower[day_forward,1])
exp(forecast_5months$upper[day_forward,1])
day_forward
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
day_forward <- 5
exp(forecast_5months$mean[day_forward])
exp(forecast_5months$lower[day_forward,1])
exp(forecast_5months$upper[day_forward,1])
tail(COVID_tbl2)
# Verify the predictions
tail(tem_time)
exp(forecast_5months$mean[day_forward])
forecast_5months
real_predict_values <- exp(forecast_5months)
forecast_5months
real_predict_values <- exp(forecast_5months$x)
real_predict_values <- exp(forecast_5months$fitted)
(278 + 293+303+293+295)/5
# Verify the predictions
tail(tem_time[-5:-1])
# Verify the predictions
real_values <- tail(tem_time)
View(real_values)
real_values$temp_mean[2:6]
mean_vaues <- sum(real_values$temp_mean[2:6])
forecast_5months
real_predict_values <- exp(forecast_5months$residuals)
forecast_5months
predict_mean_values <- exp(forecast_5months$mean[day_forward])
bias = (mean_values - predict_mean_values)/mean_vaues
mean_vaues <- sum(real_values$temp_mean[2:6])
# Verify the predictions
real_values <- tail(tem_time)
mean_vaues <- sum(real_values$temp_mean[2:6])
bias = (mean_values - predict_mean_values)/mean_vaues
mean_values <- sum(real_values$temp_mean[2:6])
bias = (mean_values - predict_mean_values)/mean_values
print(bias)
mean_values
predict_mean_values
mean_values <- mean(real_values$temp_mean[2:6])
bias = (mean_values - predict_mean_values)/mean_values
print(bias)
View(forecast_5months)
predict_values <- exp(forecast_5months$mean)
predict_values
bias_every <- (real_values$temp_mean[2:6] - predict_values)/real_values$temp_mean[2:6]
bias_every
